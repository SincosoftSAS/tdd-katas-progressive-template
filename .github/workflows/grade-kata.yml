name: Grade Kata

on:
  push:
    branches:
      - 'master'
      - 'main'

permissions:
  contents: write
  pull-requests: write
  statuses: write
  issues: write

jobs:
  grade:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Get current kata
        id: kata
        run: |
          CURRENT=$(jq -r '.current_kata' .github/progress.json)
          echo "number=$CURRENT" >> $GITHUB_OUTPUT
          echo "🎯 Working on Kata $CURRENT"

      - name: Set commit status to pending
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d '{
              "state": "pending",
              "description": "🧪 Running TDD tests...",
              "context": "kata-tests"
            }'

      - name: Run tests
        id: test
        run: |
          KATA_NUM=${{ steps.kata.outputs.number }}
          echo "🎯 Testing Kata $KATA_NUM with server tests..."
          
          # Verificar que existe la kata actual
          if [ ! -d "katas/kata-$KATA_NUM" ]; then
            echo "❌ Kata $KATA_NUM directory not found"
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "error_message=Kata directory not found" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Verificar que existen las pruebas del servidor
          if [ ! -d ".github/server-tests/kata-$KATA_NUM" ]; then
            echo "❌ Server tests for kata-$KATA_NUM not found"
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "error_message=Server tests not found" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          cd "katas/kata-$KATA_NUM"
          
          echo "🔨 Building student solution..."
          if ! dotnet build --verbosity quiet > ../../build-output.txt 2>&1; then
            echo "❌ Build failed"
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "error_message=Build failed" >> $GITHUB_OUTPUT
            echo ""
            echo "📋 Build Error Details:"
            cat ../../build-output.txt
            exit 1
          fi
          
          echo "🧪 Running student tests (quick check)..."
          dotnet test --verbosity quiet --logger "console;verbosity=minimal" || echo "ℹ️ Student tests may fail (TDD process)"
          
          echo ""
          echo "🔍 Running SERVER TESTS (comprehensive evaluation)..."
          
          # Crear directorio temporal para las pruebas del servidor
          cd ../../
          mkdir -p temp-server-tests
          
          # Copiar TODA la estructura del proyecto del estudiante
          cp -r "katas/kata-$KATA_NUM" "temp-server-tests/"
          
          cd "temp-server-tests/kata-$KATA_NUM"
          
          echo "📋 Original test files:"
          find . -name "*Tests.cs" -o -name "*Test.cs" | head -5
          
          # AGREGAR los archivos de server tests al proyecto como archivos adicionales
          # Esto permite ejecutar tanto los tests del estudiante como los del servidor
          
          SERVER_TEST_FILE="../../.github/server-tests/kata-$KATA_NUM/ServerTests.cs"
          if [ -f "$SERVER_TEST_FILE" ]; then
            echo "🔄 Adding comprehensive server tests to project..."
            
            # Encontrar el directorio de tests del proyecto
            TEST_DIR=$(find . -name "*.Tests" -type d | head -1)
            if [ -n "$TEST_DIR" ]; then
              echo "  📁 Found test directory: $TEST_DIR"
              # Copiar el archivo de server tests al directorio de tests
              cp "$SERVER_TEST_FILE" "$TEST_DIR/ServerTests.cs"
              echo "  📝 Added ServerTests.cs with comprehensive server tests"
            else
              echo "  ❌ Could not find test directory"
              echo "result=failure" >> $GITHUB_OUTPUT
              echo "error_message=Test directory not found" >> $GITHUB_OUTPUT
              cd ../../
              rm -rf temp-server-tests
              exit 1
            fi
          else
            echo "  ❌ Server test file not found: $SERVER_TEST_FILE"
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "error_message=Server tests not found" >> $GITHUB_OUTPUT
            cd ../../
            rm -rf temp-server-tests
            exit 1
          fi
          
          echo ""
          echo "📋 After adding server tests - test files content:"
          find . -name "*Tests.cs" -not -path "*/obj/*" -not -path "*/bin/*" | while read testfile; do
            # Saltar archivos de template vacíos como UnitTest1.cs
            if [[ "$(basename "$testfile")" == "UnitTest1.cs" ]]; then
              echo "📄 $testfile: (skipping default template file)"
              continue
            fi
            
            echo "📄 $testfile:"
            # Contar tanto [Fact] (xUnit) como [TestMethod] (MSTest) para compatibilidad
            FACT_COUNT=$(grep -c "\[Fact\]" "$testfile" 2>/dev/null || echo "0")
            TESTMETHOD_COUNT=$(grep -c "\[TestMethod\]" "$testfile" 2>/dev/null || echo "0")
            
            # Asegurar que son números válidos
            if ! [[ "$FACT_COUNT" =~ ^[0-9]+$ ]]; then
              FACT_COUNT=0
            fi
            if ! [[ "$TESTMETHOD_COUNT" =~ ^[0-9]+$ ]]; then
              TESTMETHOD_COUNT=0
            fi
            
            TOTAL_TESTS=$((FACT_COUNT + TESTMETHOD_COUNT))
            echo "  xUnit [Fact] tests: $FACT_COUNT"
            echo "  MSTest [TestMethod] tests: $TESTMETHOD_COUNT" 
            echo "  Total test methods: $TOTAL_TESTS"
          done
          
          echo ""
          echo "🔨 Building with server tests..."
          if ! dotnet build --verbosity normal > ../../server-build-output.txt 2>&1; then
            echo "❌ Build with server tests failed"
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "error_message=Server build failed" >> $GITHUB_OUTPUT
            echo ""
            echo "📋 Server Build Error Details:"
            cat ../../server-build-output.txt
            cd ../../
            rm -rf temp-server-tests
            exit 1
          fi
          
          echo ""
          echo "🧪 Executing SERVER TESTS..."
          # Ejecutar las pruebas del servidor (ahora incluidas como archivo adicional)
          if dotnet test --verbosity normal --logger "console;verbosity=detailed" > ../../server-test-output.txt 2>&1; then
            echo "✅ ALL SERVER TESTS PASSED! Kata $KATA_NUM completed successfully"
            echo "result=success" >> $GITHUB_OUTPUT
            
            # Mostrar resumen completo
            echo ""
            echo "📊 Complete Test Results Summary:"
            cat ../../server-test-output.txt | grep -E "(Passed|Failed|Skipped|Total)" || echo "Could not parse results"
            
            # Contar tests ejecutados
            TOTAL_TESTS=$(cat ../../server-test-output.txt | grep -o "Passed.*" | wc -l)
            echo ""
            echo "🎯 Total server tests executed: $TOTAL_TESTS"
            
          else
            echo "❌ SERVER TESTS FAILED - Kata $KATA_NUM not yet complete"
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "error_message=Server tests failed" >> $GITHUB_OUTPUT
            
            echo ""
            echo "📋 Detailed server test failure report:"
            cat ../../server-test-output.txt
            
            echo ""
            echo "🔍 Extracting specific failed test information..."
            
            # Extraer nombres específicos de tests fallidos de diferentes formatos
            FAILED_TEST_NAMES=""
            
            # Formato 1: "Failed Generate_WithOne_ReturnsListWithOne"
            FAILED_NAMES_FORMAT1=$(cat ../../server-test-output.txt | grep -o "Failed [A-Za-z_][A-Za-z0-9_]*" | sed 's/Failed //' || echo "")
            
            # Formato 2: "FAIL FizzBuzz.Tests.ServerTests.Generate_WithOne_ReturnsListWithOne"  
            FAILED_NAMES_FORMAT2=$(cat ../../server-test-output.txt | grep -o "FAIL.*\.[A-Za-z_][A-Za-z0-9_]*$" | sed 's/.*\.//' || echo "")
            
            # Formato 3: "[FAIL] FizzBuzz.Tests.ServerTests.Generate_WithOne_ReturnsListWithOne"
            FAILED_NAMES_FORMAT3=$(cat ../../server-test-output.txt | grep -o "\[FAIL\].*\.[A-Za-z_][A-Za-z0-9_]*$" | sed 's/.*\.//' || echo "")
            
            # Combinar todos los nombres encontrados
            ALL_FAILED_NAMES="$FAILED_NAMES_FORMAT1 $FAILED_NAMES_FORMAT2 $FAILED_NAMES_FORMAT3"
            
            # Limpiar y deduplicar nombres de tests fallidos
            FAILED_TEST_NAMES=$(echo "$ALL_FAILED_NAMES" | tr ' ' '\n' | grep -v '^$' | sort -u | tr '\n' '|' | sed 's/|$//')
            
            if [ -n "$FAILED_TEST_NAMES" ]; then
              READABLE_NAMES=$(echo "$FAILED_TEST_NAMES" | tr '|' '\n' | sed 's/_/ /g' | tr '\n' ',' | sed 's/,$//' | sed 's/,/, /g')
              echo "📝 Failed test methods identified: $READABLE_NAMES"
              echo "$FAILED_TEST_NAMES" > ../../failed-test-names.txt
            else
              echo "⚠️ Could not extract specific test names, using general failure info"
              echo "UNKNOWN_TESTS" > ../../failed-test-names.txt
            fi
            
            # Guardar información completa de pruebas fallidas para usar en el issue
            cat ../../server-test-output.txt | grep -A 3 -B 1 "FAIL\|Failed\|✗" > ../../failed-tests-details.txt 2>/dev/null || echo "Could not extract detailed failure info" > ../../failed-tests-details.txt
            
            echo ""
            echo "💡 Keep implementing using TDD until all functionality is complete!"
            echo "📝 Server tests are comprehensive and test ALL required features."
          fi
          
          # Limpiar
          cd ../../
          rm -rf temp-server-tests

      - name: Update progress on success
        if: steps.test.outputs.result == 'success'
        run: |
          CURRENT=${{ steps.kata.outputs.number }}
          NEXT=$((CURRENT + 1))
          
          # Update progress.json
          jq ".current_kata = $NEXT | .completed_katas += [$CURRENT] | .last_updated = \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"" .github/progress.json > temp.json
          mv temp.json .github/progress.json
          
          # Commit changes
          git config user.name "TDD Bot"
          git config user.email "tdd-bot@github.com"
          git add .github/progress.json
          git commit -m "Complete Kata $CURRENT" || true
          git push origin ${{ github.ref_name }}
          
          echo "📊 Progress updated: Kata $CURRENT → Kata $NEXT"

      - name: Unlock next kata
        if: steps.test.outputs.result == 'success'
        run: |
          CURRENT=${{ steps.kata.outputs.number }}
          NEXT=$((CURRENT + 1))
          
          if [ -d ".github/kata-templates/kata-$NEXT" ] && [ ! -d "katas/kata-$NEXT" ]; then
            echo "🔓 Unlocking Kata $NEXT..."
            
            # Copy template to working directory
            cp -r ".github/kata-templates/kata-$NEXT" "katas/"
            
            # Commit new kata
            git add "katas/kata-$NEXT"
            git commit -m "Unlock Kata $NEXT" || true
            git push origin ${{ github.ref_name }}
            
            echo "✅ Kata $NEXT unlocked!"
          else
            echo "🏆 All katas completed or next kata already exists!"
          fi

      - name: Set final commit status
        if: always()
        run: |
          if [ "${{ steps.test.outputs.result }}" == "success" ]; then
            STATE="success"
            DESC="✅ Tests passed! Kata ${{ steps.kata.outputs.number }} completed"
          else
            STATE="failure"  
            DESC="❌ Tests failed - check logs for details"
          fi
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"$STATE\",
              \"description\": \"$DESC\",
              \"context\": \"kata-tests\",
              \"target_url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
            }"

      - name: Create failure issue
        if: steps.test.outputs.result == 'failure'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          KATA_NUM=${{ steps.kata.outputs.number }}
          ERROR_MSG="${{ steps.test.outputs.error_message }}"
          
          # Verificar configuración de GitHub CLI
          echo "🔍 Checking GitHub CLI configuration..."
          gh --version
          gh auth status || echo "Auth status check failed"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          
          # Función para crear issue con manejo robusto de errores
          create_issue_safe() {
            local title="$1"
            local body="$2"
            
            echo "Creating issue: $title"
            echo "Body preview: ${body:0:100}..."
            
            # Escapar caracteres especiales en el título y cuerpo
            local safe_title=$(echo "$title" | sed 's/"/\\"/g')
            local safe_body=$(echo "$body" | sed 's/"/\\"/g' | tr '\n' ' ')
            
            # Intentar crear issue paso a paso para debugging
            echo "Attempting to create issue with gh CLI..."
            
            # Primer intento: con asignación (sin labels problemáticos)
            if gh issue create \
              --title "$safe_title" \
              --body "$safe_body" \
              --assignee "${{ github.actor }}" 2>&1; then
              echo "✅ Issue created and assigned successfully"
              return 0
            fi
            
            echo "Assignment failed, trying without assignee..."
            
            # Segundo intento: sin asignación
            if gh issue create \
              --title "$safe_title" \
              --body "$safe_body" 2>&1; then
              echo "✅ Issue created successfully (without assignee)"
              return 0
            fi
            
            echo "Both attempts failed, trying with minimal content..."
            
            # Tercer intento: versión simplificada
            if gh issue create \
              --title "Kata $KATA_NUM: Test Failure" \
              --body "Tests failed. Check workflow logs for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" 2>&1; then
              echo "✅ Minimal issue created successfully"
              return 0
            fi
            
            echo "❌ All attempts to create issue failed"
            return 1
          }
          
          # Crear issue específico basado en el tipo de error
          if [[ "$ERROR_MSG" == *"Build failed"* ]]; then
            ISSUE_BODY="🔨 Build Failed - Your code does not compile. Next Steps: 1) Run 'dotnet build' in katas/kata-$KATA_NUM to see the build errors 2) Fix the compilation errors in your code 3) Commit and push your changes to retry. Workflow Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            create_issue_safe "🔨 Kata $KATA_NUM: Build Error" "$ISSUE_BODY"
              
          elif [[ "$ERROR_MSG" == *"Server build failed"* ]]; then
            ISSUE_BODY="⚙️ Server Integration Error - Your code compiles but there is an issue with the server test integration. Possible Causes: Namespace mismatch, Class name doesn't match expected format, Missing public access modifiers. Next Steps: 1) Check that your namespaces and class names match the expected format 2) Ensure your main classes are public 3) Commit and push your changes to retry. Workflow Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            create_issue_safe "⚙️ Kata $KATA_NUM: Server Integration Error" "$ISSUE_BODY"
              
          else
            # Server tests failed - crear issue con detalles
            echo "Creating detailed test failure issue..."
            
            # Extraer información específica de pruebas fallidas
            FAILED_INFO="Check workflow logs for detailed failure information"
            SPECIFIC_FAILED_TESTS=""
            
            if [ -f "failed-test-names.txt" ]; then
              FAILED_TEST_NAMES=$(cat failed-test-names.txt 2>/dev/null || echo "")
              if [ -n "$FAILED_TEST_NAMES" ] && [ "$FAILED_TEST_NAMES" != "UNKNOWN_TESTS" ]; then
                # Convertir nombres de tests a formato legible
                SPECIFIC_FAILED_TESTS=$(echo "$FAILED_TEST_NAMES" | tr '|' '\n' | sed 's/_/ /g' | sed 's/^/• /' | tr '\n' ' ')
                FAILED_COUNT=$(echo "$FAILED_TEST_NAMES" | tr '|' '\n' | wc -l)
                FAILED_INFO="$FAILED_COUNT specific tests failed"
              fi
            fi
            
            # Si no encontramos tests específicos, usar información general
            if [ -z "$SPECIFIC_FAILED_TESTS" ]; then
              if [ -f "failed-tests-details.txt" ]; then
                FAILED_COUNT=$(wc -l < failed-tests-details.txt 2>/dev/null || echo "0")
                if [ "$FAILED_COUNT" -gt 0 ]; then
                  FAILED_INFO="$FAILED_COUNT test failures detected"
                fi
              fi
              SPECIFIC_FAILED_TESTS="Run 'dotnet test' locally to see specific test failures"
            fi
            
            # Crear mensaje detallado del issue
            if [ -n "$SPECIFIC_FAILED_TESTS" ] && [ "$SPECIFIC_FAILED_TESTS" != "Run 'dotnet test' locally to see specific test failures" ]; then
              ISSUE_BODY="🧪 Server Tests Failed - Your kata is not yet complete. Status: Code compiles successfully but some functionality is missing. Failed Tests: $SPECIFIC_FAILED_TESTS Next Steps: 1) Focus on implementing the functionality for the failed tests listed above 2) Run 'dotnet test' in katas/kata-$KATA_NUM to see detailed error messages 3) Use TDD approach: make one test pass at a time 4) Commit and push your changes to retry. Test Results: $FAILED_INFO. Workflow Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            else
              ISSUE_BODY="🧪 Server Tests Failed - Your kata is not yet complete. Status: Code compiles successfully but some functionality is missing. Next Steps: 1) Run 'dotnet test' in katas/kata-$KATA_NUM to see which tests are failing 2) Continue implementing using TDD (Test-Driven Development) 3) Write code to make the failing tests pass 4) Commit and push your changes to retry. Test Results: $FAILED_INFO. Workflow Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            fi
            
            create_issue_safe "🧪 Kata $KATA_NUM: Tests Failed" "$ISSUE_BODY"
          fi