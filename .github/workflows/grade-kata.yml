name: Grade Kata

on:
  push:
    branches:
      - 'master'
      - 'main'
      - 'kata-**'

permissions:
  contents: write
  pull-requests: write
  statuses: write
  issues: write

jobs:
  grade:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout student code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup GitHub labels
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üè∑Ô∏è  Ensuring required labels exist..."
          
          # Create base labels if they don't exist (ignore errors if they already exist)
          gh label create "test-failure" --color "d73a4a" --description "Tests failed in kata evaluation" 2>/dev/null || echo "Label 'test-failure' already exists"
          gh label create "kata" --color "0052cc" --description "TDD Kata related" 2>/dev/null || echo "Label 'kata' already exists"
          gh label create "unlocked" --color "28a745" --description "Kata unlocked and available" 2>/dev/null || echo "Label 'unlocked' already exists"
          
          # Create kata-specific labels for all possible katas
          for i in {01..05}; do
            gh label create "kata-$i" --color "1d76db" --description "Kata $i related" 2>/dev/null || echo "Label 'kata-$i' already exists"
          done
          
          echo "‚úÖ Labels ready"

      - name: Set initial commit status
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -d '{
              "state": "pending",
              "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "description": "üß™ Evaluando tests TDD...",
              "context": "kata-tests"
            }'

      - name: Detect current kata
        id: detect
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "branch_name=$BRANCH" >> $GITHUB_OUTPUT
          
          # Detect kata from progress file
          if [ -f .github/.kata-progress.json ]; then
            CURRENT_KATA=$(jq -r '.current' .github/.kata-progress.json)
          else
            CURRENT_KATA=1
          fi
          
          # Format kata number (e.g., 1 ‚Üí 01)
          KATA_NUMBER=$(printf "%02d" $CURRENT_KATA)
          echo "kata_number=$KATA_NUMBER" >> $GITHUB_OUTPUT
          
          # Map kata number to name
          case $KATA_NUMBER in
            "01") KATA_NAME="fizzbuzz" ;;
            "02") KATA_NAME="calculator" ;;
            "03") KATA_NAME="leapyear" ;;
            *) KATA_NAME="unknown" ;;
          esac
          
          echo "kata_name=$KATA_NAME" >> $GITHUB_OUTPUT
          echo "üéØ Evaluating Kata #$KATA_NUMBER: $KATA_NAME"
      
      # ========== C# TESTING WORKFLOW ==========
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Download hidden tests (C#)
        env:
          KATA_NUMBER: ${{ steps.detect.outputs.kata_number }}
          KATA_NAME: ${{ steps.detect.outputs.kata_name }}
          REPO_OWNER: ${{ github.repository_owner }}
        run: |
          echo "üì¶ Downloading hidden tests for Kata $KATA_NUMBER..."
          
          # Determine project name from kata name (capitalize first letter)
          PROJECT_NAME=$(echo $KATA_NAME | sed 's/\b\(.\)/\u\1/g' | sed 's/-//g')
          echo "Project name: $PROJECT_NAME"
          
          # Try to download HiddenTests.cs
          HTTP_CODE=$(curl -L -w "%{http_code}" -o HiddenTests.cs \
            "https://raw.githubusercontent.com/$REPO_OWNER/tdd-katas-progressive-template/main/.github/ci-tests/kata-$KATA_NUMBER-$KATA_NAME/HiddenTests.cs")
          
          if [ "$HTTP_CODE" == "200" ] && [ -f HiddenTests.cs ]; then
            echo "‚úÖ Hidden tests downloaded successfully"
            
            # Download .csproj file - try both generic and specific names
            curl -L "https://raw.githubusercontent.com/$REPO_OWNER/tdd-katas-progressive-template/main/.github/ci-tests/kata-$KATA_NUMBER-$KATA_NAME/$PROJECT_NAME.HiddenTests.csproj" \
              -o HiddenTests.csproj
            
            # Create hidden tests project directory
            mkdir -p $PROJECT_NAME.HiddenTests
            mv HiddenTests.cs HiddenTests.csproj $PROJECT_NAME.HiddenTests/
            
            # Add to solution if exists
            if ls *.sln 1> /dev/null 2>&1; then
              dotnet sln add $PROJECT_NAME.HiddenTests/HiddenTests.csproj 2>/dev/null || true
            fi
            
            echo "has_hidden_tests=true" >> $GITHUB_ENV
          else
            echo "‚ÑπÔ∏è No hidden tests found for this kata (HTTP $HTTP_CODE)"
            echo "has_hidden_tests=false" >> $GITHUB_ENV
          fi
      
      - name: Build and test (C#)
        id: test_csharp
        continue-on-error: true
        run: |
          echo "üî® Building project..."
          dotnet restore
          dotnet build --no-restore
          
          echo "üß™ Running tests..."
          dotnet test --no-build --verbosity normal 2>&1 | tee test-output.txt
          
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "‚úÖ All C# tests passed!"
          else
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "‚ùå Some C# tests failed"
          fi
      
      # ========== COMMON: Update Progress ==========
      
      - name: Determine test result
        id: test
        run: |
          echo "result=${{ steps.test_csharp.outputs.result }}" >> $GITHUB_OUTPUT
      
      - name: Update progress tracking
        if: steps.test.outputs.result == 'success'
        env:
          KATA_NUMBER: ${{ steps.detect.outputs.kata_number }}
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Create or update .kata-progress.json (in .github/)
          if [ -f .github/.kata-progress.json ]; then
            PROGRESS=$(cat .github/.kata-progress.json)
          else
            PROGRESS='{"completed":[],"current":1,"last_completed_date":""}'
          fi
          
          # Add completed kata and update current
          CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          KATA_NUM_INT=$(echo $KATA_NUMBER | sed 's/^0*//')  # Remove leading zeros: 01 -> 1
          
          echo $PROGRESS | jq --argjson num "$KATA_NUM_INT" --arg date "$CURRENT_DATE" \
            '.completed += [$num] | .completed |= unique | .completed |= sort | .current = ($num + 1) | .last_completed_date = $date' \
            > .github/.kata-progress.json
          
          git add -f .github/.kata-progress.json
          
          echo "üìä Progress file updated successfully"
      
      - name: Update student PROGRESS.md
        if: steps.test.outputs.result == 'success'
        env:
          KATA_NUMBER: ${{ steps.detect.outputs.kata_number }}
          KATA_NAME: ${{ steps.detect.outputs.kata_name }}
        run: |
          echo "üìù Updating PROGRESS.md for student..."
          
          # Read current progress
          COMPLETED_COUNT=$(jq -r '.completed | length' .github/.kata-progress.json)
          CURRENT_KATA=$(jq -r '.current' .github/.kata-progress.json)
          LAST_DATE=$(jq -r '.last_completed_date' .github/.kata-progress.json)
          
          # Determine level based on completed count
          if [ "$COMPLETED_COUNT" -eq 0 ]; then
            LEVEL="Principiante ü•ö"
          elif [ "$COMPLETED_COUNT" -eq 1 ]; then
            LEVEL="Iniciado üê£"
          elif [ "$COMPLETED_COUNT" -eq 2 ]; then
            LEVEL="En Progreso üê•"
          elif [ "$COMPLETED_COUNT" -eq 3 ]; then
            LEVEL="Avanzado ü¶Ö"
          else
            LEVEL="Experto üèÖ"
          fi
          
          # Update estado actual
          sed -i "s/\*\*Kata Actual:\*\* Kata [0-9]\\+ - [A-Za-z]\\+.**/**Kata Actual:** Kata $KATA_NUMBER - $KATA_NAME (‚úÖ Completada)/" PROGRESS.md
          
          # Update completed count
          sed -i "s/\*\*Katas Completadas:\*\* [0-9]\\+ \\/ 5/**Katas Completadas:** $COMPLETED_COUNT \/ 5/" PROGRESS.md
          
          # Update level
          sed -i "s/\*\*Nivel:\*\* [^$]*/**Nivel:** $LEVEL/" PROGRESS.md
          
          # Update timestamp
          sed -i "s/<sub>√öltima actualizaci√≥n:.*<\\/sub>/<sub>√öltima actualizaci√≥n: $LAST_DATE | Kata actual: $KATA_NUMBER | Completada ‚úÖ<\\/sub>/" PROGRESS.md
          
          git add PROGRESS.md
          git commit -m "Update progress: Kata $KATA_NUMBER completed" -m "[skip ci]" || true
          git push origin ${{ steps.detect.outputs.branch_name }}
          
          echo "üìä Student PROGRESS.md updated successfully"
      
      - name: Update PROGRESS.md with failure status
        if: steps.test.outputs.result == 'failure'
        env:
          KATA_NUMBER: ${{ steps.detect.outputs.kata_number }}
          KATA_NAME: ${{ steps.detect.outputs.kata_name }}
        run: |
          echo "üìù Updating PROGRESS.md with failure status..."
          
          # Update estado actual with failure indicator
          sed -i "s/\*\*Kata Actual:\*\* Kata [0-9]\\+ - [A-Za-z]\\+.**/**Kata Actual:** Kata $KATA_NUMBER - $KATA_NAME (‚ö†Ô∏è Tests Failing)/" PROGRESS.md
          
          # Add failure message to PROGRESS.md temporarily
          FAILURE_NOTE="
          ---
          
          ## ‚ö†Ô∏è Current Status: Tests Failing
          
          Your latest submission didn't pass all tests. This is normal in TDD!
          
          **Next steps:**
          1. Check the [GitHub Actions](../../actions) for detailed test results
          2. Look for any open issues with test failure details
          3. Run \`dotnet test\` locally to see which tests are failing
          4. Follow the TDD cycle: Red ‚Üí Green ‚Üí Refactor
          5. Push again when ready
          
          **Remember:** Failing fast is part of learning TDD! üöÄ
          
          ---
          "
          
          # Add failure note if not already present
          if ! grep -q "Tests Failing" PROGRESS.md; then
            echo "$FAILURE_NOTE" >> PROGRESS.md
          fi
          
          # Update timestamp
          CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          sed -i "s/<sub>√öltima actualizaci√≥n:.*<\\/sub>/<sub>√öltima actualizaci√≥n: $CURRENT_DATE | Kata actual: $KATA_NUMBER | Tests failing ‚ö†Ô∏è<\\/sub>/" PROGRESS.md
          
          git add PROGRESS.md
          git commit -m "Update: Tests failing for Kata $KATA_NUMBER" -m "[skip ci]" || true
          git push origin ${{ steps.detect.outputs.branch_name }}
          
          echo "üìä PROGRESS.md updated with failure status"
      
      - name: Display immediate results
        if: always()
        env:
          KATA_NUMBER: ${{ steps.detect.outputs.kata_number }}
          KATA_NAME: ${{ steps.detect.outputs.kata_name }}
        run: |
          echo "=================================================="
          echo "üéØ TDD KATA EVALUATION RESULTS"
          echo "=================================================="
          echo "üìù Kata: #$KATA_NUMBER - $KATA_NAME"
          echo "üìÖ Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "üîÄ Commit: ${{ github.sha }}"
          echo "=================================================="
          
          if [ "${{ steps.test.outputs.result }}" == "success" ]; then
            echo "üéâ STATUS: SUCCESS! ‚úÖ"
            echo "=================================================="
            echo "‚úÖ All visible tests: PASSED"
            echo "‚úÖ All hidden tests: PASSED"
            echo "üìä Progress: UPDATED"
            echo "üîì Next kata: UNLOCKING..."
            echo "=================================================="
            echo "üöÄ NEXT STEPS:"
            echo "   1. Wait ~30 seconds for unlock"
            echo "   2. Check for new PR with next kata"
            echo "   3. Continue your TDD journey!"
          else
            echo "‚ùå STATUS: TESTS FAILED"
            echo "=================================================="
            echo "‚ùå Some tests failed - see details below"
            echo "üìä Progress: NOT UPDATED (stay on current kata)"
            echo "üîß Feedback: Automatic issue created"
            echo "=================================================="
            echo "üîç WHAT TO CHECK:"
            echo "   1. Visit GitHub Issues for detailed feedback"
            echo "   2. Check PROGRESS.md for current status"
            echo "   3. Review test failures in Actions logs"
            echo "   4. Follow TDD cycle: Red ‚Üí Green ‚Üí Refactor"
          fi
          
          echo "=================================================="
          echo "üì± FEEDBACK CHANNELS:"
          echo "   - ‚úÖ Commit status (visible in GitHub)"
          echo "   - üí¨ Commit comment (click commit in GitHub)"
          echo "   - üìã GitHub Issue (for failures)"
          echo "   - üìä PROGRESS.md (visual dashboard)"
          echo "=================================================="

      - name: Update commit status
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KATA_NUMBER: ${{ steps.detect.outputs.kata_number }}
          KATA_NAME: ${{ steps.detect.outputs.kata_name }}
        run: |
          echo "üîç Debug info:"
          echo "  Repository: ${{ github.repository }}"
          echo "  SHA: ${{ github.sha }}"
          echo "  Test result: ${{ steps.test.outputs.result }}"
          echo "  Kata: ${KATA_NUMBER}"
          
          if [ "${{ steps.test.outputs.result }}" == "success" ]; then
            echo "‚úÖ Setting commit status to success"
            RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
              -d "{
                \"state\": \"success\",
                \"target_url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
                \"description\": \"All tests passed! Kata ${KATA_NUMBER} completed üéâ\",
                \"context\": \"TDD Kata Evaluation\"
              }")
            echo "API Response: $RESPONSE"
          else
            echo "‚ùå Setting commit status to failure"
            RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
              -d "{
                \"state\": \"failure\",
                \"target_url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
                \"description\": \"Tests failed - check logs and issue for guidance\",
                \"context\": \"TDD Kata Evaluation\"
              }")
            echo "API Response: $RESPONSE"
          fi
      
      - name: Add commit comment with results
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KATA_NUMBER: ${{ steps.detect.outputs.kata_number }}
          KATA_NAME: ${{ steps.detect.outputs.kata_name }}
        run: |
          if [ "${{ steps.test.outputs.result }}" == "success" ]; then
            cat > commit-comment.md << 'EOF'
          ## ‚úÖ Kata Tests Passed! üéâ
          
          **Kata:** #$KATA_NUMBER - $KATA_NAME  
          **Status:** All tests completed successfully  
          **Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ### üéì What happened:
          - ‚úÖ All visible tests passed
          - ‚úÖ All hidden tests passed
          - üìä Your progress has been updated
          - üîì Next kata is being unlocked automatically
          
          ### üöÄ Next steps:
          - Wait ~30 seconds for unlock workflow
          - Check for new PR with next kata
          - Continue your TDD journey!
          
          **Great work following TDD principles!** üèÜ
          EOF
          else
            # Get test failure details
            if [ -f test-output.txt ]; then
              FAILED_SUMMARY=$(grep -E "(Failed|Error)" test-output.txt | head -3 | sed 's/^/  /')
            else
              FAILED_SUMMARY="  Tests execution failed"
            fi
            
            cat > commit-comment.md << EOF
          ## ‚ùå Kata Tests Failed
          
          **Kata:** #$KATA_NUMBER - $KATA_NAME  
          **Status:** Some tests are failing  
          **Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ### üö® What happened:
          $FAILED_SUMMARY
          
          ### üîç Next steps:
          1. **Check the [issue created](${{ github.server_url }}/${{ github.repository }}/issues?q=is%3Aopen+label%3Atest-failure+label%3Akata-$KATA_NUMBER)** for detailed guidance
          2. **Run tests locally:** \`dotnet test\`
          3. **Follow TDD cycle:** Red ‚Üí Green ‚Üí Refactor
          4. **Push again** when ready for re-evaluation
          
          ### üí° Remember:
          **Failing tests is part of TDD learning!** Each failure teaches you something. Keep iterating! üîÑ
          
          **Detailed logs:** [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF
          fi
          
          # Post comment to commit
          gh api \
            --method POST \
            /repos/${{ github.repository }}/commits/${{ github.sha }}/comments \
            -f body="$(cat commit-comment.md)"
          
          echo "üìù Commit comment added with test results"
      
      - name: Create failure notification issue
        if: steps.test.outputs.result == 'failure'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KATA_NUMBER: ${{ steps.detect.outputs.kata_number }}
          KATA_NAME: ${{ steps.detect.outputs.kata_name }}
          BRANCH_NAME: ${{ steps.detect.outputs.branch_name }}
        run: |
          echo "üìù Creating issue for test failure notification..."
          
          # Read test output for details
          if [ -f test-output.txt ]; then
            FAILED_TESTS=$(grep "Failed:" test-output.txt | head -1 || echo "Some tests failed")
            TEST_OUTPUT=$(tail -50 test-output.txt | sed 's/$/\\n/g' | tr -d '\n')
          else
            FAILED_TESTS="Tests execution failed"
            TEST_OUTPUT="No detailed output available"
          fi
          
          # Create issue with failure details
          cat > issue-body.md << 'EOF'
          ## ‚ùå Kata Tests Failed
          
          **Kata:** #$KATA_NUMBER - $KATA_NAME  
          **Branch:** `$BRANCH_NAME`  
          **Commit:** ${{ github.sha }}  
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ### üö® What Happened
          
          Your latest push didn't pass all the required tests. Don't worry - this is part of the TDD learning process!
          
          ### üìä Test Results
          
          ```
          $FAILED_TESTS
          ```
          
          ### üîç Next Steps
          
          1. **Review the test output** in the [GitHub Actions logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          2. **Run tests locally** to see detailed failures:
             ```bash
             dotnet test
             ```
          3. **Follow TDD cycle**:
             - üî¥ **Red**: Understand which test is failing
             - üü¢ **Green**: Write minimal code to make it pass
             - üîµ **Refactor**: Improve your solution
          4. **Push again** when ready for re-evaluation
          
          ### üí° Common Issues
          
          - **Logic errors**: Check your conditionals and loops
          - **Edge cases**: Are you handling n=0, n=1, etc.?
          - **Return types**: Make sure you're returning the expected type
          - **Off-by-one errors**: Check your loop boundaries
          
          ### üìö Resources
          
          - Check [`PROGRESS.md`](PROGRESS.md) for detailed kata instructions
          - Review the kata definition in `.github/kata-definitions/kata-$KATA_NUMBER-$KATA_NAME.md`
          - Run `dotnet test --logger "console;verbosity=detailed"` for verbose output
          
          ### üéØ Remember
          
          **Failing tests is normal and expected in TDD!** Each failure teaches you something. Keep iterating until all tests pass.
          
          ---
          
          *This issue will be automatically closed when your tests pass. You can also close it manually if no longer needed.*
          EOF
          
          # Create the issue
          # Create issue for test failure (labels should exist now)
          gh issue create \
            --title "‚ùå Tests Failed: Kata $KATA_NUMBER ($KATA_NAME)" \
            --body-file issue-body.md \
            --label "test-failure" \
            --label "kata-$KATA_NUMBER" \
            --assignee "${{ github.actor }}"
          
          echo "‚úÖ Failure notification issue created"
      
      - name: Close previous failure issues on success
        if: steps.test.outputs.result == 'success'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KATA_NUMBER: ${{ steps.detect.outputs.kata_number }}
        run: |
          echo "üîç Checking for open test failure issues to close..."
          
          # Find and close open test failure issues for this kata (labels should exist now)
          OPEN_ISSUES=$(gh issue list --label "test-failure" --label "kata-$KATA_NUMBER" --state open --json number --jq '.[].number' || echo "")
          
          if [ -n "$OPEN_ISSUES" ]; then
            for issue_number in $OPEN_ISSUES; do
              echo "‚úÖ Closing test failure issue #$issue_number"
              gh issue close $issue_number --comment "üéâ **Tests now passing!** All issues resolved. Great work following the TDD process!"
            done
          else
            echo "‚ÑπÔ∏è No open test failure issues found"
          fi
      
      - name: Trigger unlock next kata
        if: steps.test.outputs.result == 'success'
        run: |
          echo "üîì Triggering unlock workflow for next kata..."
          
          # Trigger via repository dispatch
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{
              "event_type": "unlock-next-kata",
              "client_payload": {
                "completed_kata": "${{ steps.detect.outputs.kata_number }}",
                "kata_name": "${{ steps.detect.outputs.kata_name }}",
                "student_branch": "${{ steps.detect.outputs.branch_name }}"
              }
            }'
      
      - name: Report results
        if: always()
        run: |
          echo "========================================"
          echo "üìä Kata Evaluation Summary"
          echo "========================================"
          echo "Kata: #${{ steps.detect.outputs.kata_number }} - ${{ steps.detect.outputs.kata_name }}"
          echo "Type: C# (.NET 8.0)"
          echo "Branch: ${{ steps.detect.outputs.branch_name }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          
          if [ "${{ steps.test.outputs.result }}" == "success" ]; then
            echo "‚úÖ STATUS: COMPLETED! üéâ"
            echo ""
            echo "üéì Congratulations! All tests passed (visible + hidden)."
            echo "ÔøΩ Your PROGRESS.md has been updated automatically."
            echo "ÔøΩüîì Next kata will be unlocked automatically..."
            echo ""
            echo "‚è≥ Wait for the unlock workflow to complete (~30 seconds)."
            echo "üì¨ You'll receive a notification when the next kata is ready."
            echo "üåø A new branch will be created with your next challenge."
          else
            echo "‚ùå STATUS: TESTS FAILING"
            echo ""
            echo "üìù Some tests didn't pass. This is normal in TDD!"
            echo "üìã An issue has been created with detailed feedback."
            echo "üìä Your PROGRESS.md shows current status."
            echo ""
            echo "üí° Next steps:"
            echo "   1. Check the test output above for details"
            echo "   2. Look for the new issue created in this repo"
            echo "   3. Run 'dotnet test' locally to debug"
            echo "   4. Follow TDD: Red ‚Üí Green ‚Üí Refactor"
            echo "   5. Push again when ready"
            echo ""
            echo "üîÑ Keep iterating - you're learning TDD the right way!"
          fi
          echo "========================================"
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-kata-${{ steps.detect.outputs.kata_number }}
          path: test-output.txt
          if-no-files-found: ignore
