name: Grade Kata

on:
  push:
    branches:
      - 'master'
      - 'main'

permissions:
  contents: write
  pull-requests: write
  statuses: write
  issues: write

jobs:
  grade:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Get current kata
        id: kata
        run: |
          CURRENT=$(jq -r '.current_kata' .github/progress.json)
          echo "number=$CURRENT" >> $GITHUB_OUTPUT
          echo "🎯 Working on Kata $CURRENT"

      - name: Set commit status to pending
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d '{
              "state": "pending",
              "description": "🧪 Running TDD tests...",
              "context": "kata-tests"
            }'

      - name: Run tests
        id: test
        run: |
          KATA_NUM=${{ steps.kata.outputs.number }}
          echo "🎯 Testing Kata $KATA_NUM with server tests..."
          
          # Verificar que existe la kata actual
          if [ ! -d "katas/kata-$KATA_NUM" ]; then
            echo "❌ Kata $KATA_NUM directory not found"
            echo "result=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Verificar que existen las pruebas del servidor
          if [ ! -d ".github/server-tests/kata-$KATA_NUM" ]; then
            echo "❌ Server tests for kata-$KATA_NUM not found"
            echo "result=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          cd "katas/kata-$KATA_NUM"
          
          echo "🔨 Building student solution..."
          if ! dotnet build --verbosity quiet; then
            echo "❌ Build failed"
            echo "result=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "🧪 Running student tests (quick check)..."
          dotnet test --verbosity quiet --logger "console;verbosity=minimal" || echo "ℹ️ Student tests may fail (TDD process)"
          
          echo ""
          echo "🔍 Running SERVER TESTS (comprehensive evaluation)..."
          
          # Crear directorio temporal para las pruebas del servidor
          cd ../../
          mkdir -p temp-server-tests
          
          # Copiar TODA la estructura del proyecto del estudiante
          cp -r "katas/kata-$KATA_NUM" "temp-server-tests/"
          
          cd "temp-server-tests/kata-$KATA_NUM"
          
          echo "📋 Original test files:"
          find . -name "*Tests.cs" -o -name "*Test.cs" | head -5
          
          # REEMPLAZAR los archivos de tests del estudiante con los del servidor
          # Esto asegura que se ejecuten las pruebas comprehensivas del servidor
          
          if [ "$KATA_NUM" = "1" ]; then
            # Kata 1: Reemplazar FizzBuzzTests.cs con FizzBuzzServerTests.cs
            if [ -f "../../.github/server-tests/kata-1/FizzBuzzServerTests.cs" ]; then
              echo "🔄 Replacing student tests with comprehensive server tests..."
              # Encontrar y reemplazar el archivo de tests del estudiante
              find . -name "*Tests.cs" -not -path "*/obj/*" -not -path "*/bin/*" | while read testfile; do
                echo "  📝 Replacing $testfile with server tests"
                cp "../../.github/server-tests/kata-1/FizzBuzzServerTests.cs" "$testfile"
              done
            fi
            
          elif [ "$KATA_NUM" = "2" ]; then
            # Kata 2: Reemplazar CalculatorTests.cs con CalculatorServerTests.cs
            if [ -f "../../.github/server-tests/kata-2/CalculatorServerTests.cs" ]; then
              echo "� Replacing student tests with comprehensive server tests..."
              find . -name "*Tests.cs" -not -path "*/obj/*" -not -path "*/bin/*" | while read testfile; do
                echo "  📝 Replacing $testfile with server tests"
                cp "../../.github/server-tests/kata-2/CalculatorServerTests.cs" "$testfile"
              done
            fi
          fi
          
          echo ""
          echo "📋 After replacement - test files content:"
          find . -name "*Tests.cs" -not -path "*/obj/*" -not -path "*/bin/*" | while read testfile; do
            echo "📄 $testfile:"
            grep -c "TestMethod" "$testfile" 2>/dev/null | xargs echo "  Test methods found:"
          done
          
          echo ""
          echo "🔨 Building with server tests..."
          if ! dotnet build --verbosity normal; then
            echo "❌ Build with server tests failed"
            echo "result=failure" >> $GITHUB_OUTPUT
            cd ../../
            rm -rf temp-server-tests
            exit 1
          fi
          
          
          echo ""
          echo "🧪 Executing SERVER TESTS..."
          # Ejecutar las pruebas del servidor (ahora son las únicas en el proyecto)
          if dotnet test --verbosity normal --logger "console;verbosity=detailed" > ../../server-test-output.txt 2>&1; then
            echo "✅ ALL SERVER TESTS PASSED! Kata $KATA_NUM completed successfully"
            echo "result=success" >> $GITHUB_OUTPUT
            
            # Mostrar resumen completo
            echo ""
            echo "📊 Complete Test Results Summary:"
            cat ../../server-test-output.txt | grep -E "(Passed|Failed|Skipped|Total)" || echo "Could not parse results"
            
            # Contar tests ejecutados
            TOTAL_TESTS=$(cat ../../server-test-output.txt | grep -o "Passed.*" | wc -l)
            echo ""
            echo "🎯 Total server tests executed: $TOTAL_TESTS"
            
          else
            echo "❌ SERVER TESTS FAILED - Kata $KATA_NUM not yet complete"
            echo "result=failure" >> $GITHUB_OUTPUT
            
            echo ""
            echo "📋 Detailed server test failure report:"
            cat ../../server-test-output.txt
            
            echo ""
            echo "💡 Keep implementing using TDD until all functionality is complete!"
            echo "📝 Server tests are comprehensive and test ALL required features."
          fi
          
          # Limpiar
          cd ../../
          rm -rf temp-server-tests

      - name: Update progress on success
        if: steps.test.outputs.result == 'success'
        run: |
          CURRENT=${{ steps.kata.outputs.number }}
          NEXT=$((CURRENT + 1))
          
          # Update progress.json
          jq ".current_kata = $NEXT | .completed_katas += [$CURRENT] | .last_updated = \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"" .github/progress.json > temp.json
          mv temp.json .github/progress.json
          
          # Commit changes
          git config user.name "TDD Bot"
          git config user.email "tdd-bot@github.com"
          git add .github/progress.json
          git commit -m "Complete Kata $CURRENT" || true
          git push origin ${{ github.ref_name }}
          
          echo "📊 Progress updated: Kata $CURRENT → Kata $NEXT"

      - name: Unlock next kata
        if: steps.test.outputs.result == 'success'
        run: |
          CURRENT=${{ steps.kata.outputs.number }}
          NEXT=$((CURRENT + 1))
          
          if [ -d ".github/kata-templates/kata-$NEXT" ] && [ ! -d "katas/kata-$NEXT" ]; then
            echo "🔓 Unlocking Kata $NEXT..."
            
            # Copy template to working directory
            cp -r ".github/kata-templates/kata-$NEXT" "katas/"
            
            # Commit new kata
            git add "katas/kata-$NEXT"
            git commit -m "Unlock Kata $NEXT" || true
            git push origin ${{ github.ref_name }}
            
            echo "✅ Kata $NEXT unlocked!"
          else
            echo "🏆 All katas completed or next kata already exists!"
          fi

      - name: Set final commit status
        if: always()
        run: |
          if [ "${{ steps.test.outputs.result }}" == "success" ]; then
            STATE="success"
            DESC="✅ Tests passed! Kata ${{ steps.kata.outputs.number }} completed"
          else
            STATE="failure"  
            DESC="❌ Tests failed - check logs for details"
          fi
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"$STATE\",
              \"description\": \"$DESC\",
              \"context\": \"kata-tests\",
              \"target_url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
            }"

      - name: Create failure issue
        if: steps.test.outputs.result == 'failure'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          KATA_NUM=${{ steps.kata.outputs.number }}
          
          # Create issue with detailed guidance
          gh issue create \
            --title "❌ Kata $KATA_NUM: Server Tests Failed" \
            --body "🧪 Server tests failed - Your kata is not yet complete. Your code compiles but doesn't pass the comprehensive server tests. Continue implementing ALL required functionality using TDD. Run 'dotnet test' in katas/kata-$KATA_NUM and push again when complete!" \
            --assignee "${{ github.actor }}"