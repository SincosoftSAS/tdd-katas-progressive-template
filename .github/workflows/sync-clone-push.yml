name: 🔄 Sync to Students (Clone & Push)

on:
  workflow_dispatch:
    inputs:
      assignment_prefix:
        description: 'Prefijo de repos estudiantes'
        required: true
        default: 'katas-tdd'
      dry_run:
        description: 'Solo mostrar repos (no crear PRs)'
        type: boolean
        default: true

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || github.token }}

      - name: 🔧 Setup GitHub CLI with PAT
        run: |
          if [ -n "${{ secrets.PAT_TOKEN }}" ]; then
            echo "✅ Usando Personal Access Token"
            gh auth login --with-token <<< "${{ secrets.PAT_TOKEN }}"
          else
            echo "❌ PAT_TOKEN no configurado"
            exit 1
          fi

      - name: 🔍 Find student repos
        id: find
        run: |
          echo "🔍 Buscando repos con prefijo: ${{ inputs.assignment_prefix }}"
          
          gh repo list ${{ github.repository_owner }} \
            --json name \
            --jq '.[] | select(.name | contains("katas-tdd")) | select(.name != "tdd-katas-progressive-template") | select(.name | endswith("-template") | not) | .name' \
            > student_repos.txt
          
          TOTAL=$(cat student_repos.txt | wc -l)
          echo "✅ Encontrados: $TOTAL repos"
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          
          if [ $TOTAL -eq 0 ]; then
            echo "❌ No se encontraron repos de estudiantes"
            exit 1
          fi

      - name: 📋 Show repos (dry run)
        if: inputs.dry_run
        run: |
          echo "🔍 DRY RUN - Repos que recibirían PRs:"
          echo "======================================"
          cat student_repos.txt | while read repo; do
            [ -n "$repo" ] && echo "  📁 ${{ github.repository_owner }}/$repo"
          done
          echo ""
          echo "📊 Total: ${{ steps.find.outputs.total }} repositorios"
          echo ""
          echo "💡 Para ejecutar: vuelve a correr con dry_run=false"

      - name: 📤 Sync repos
        if: inputs.dry_run == false
        run: |
          echo "📤 Sincronizando ${{ steps.find.outputs.total }} repositorios..."
          
          SUCCESS=0
          FAILED=0
          UPDATE_BRANCH="template-updates-$(date +%Y%m%d-%H%M%S)"
          
          # Configurar git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          cat student_repos.txt | while read repo; do
            [ -z "$repo" ] && continue
            
            echo ""
            echo "🔄 Procesando: $repo"
            echo "================================"
            
            # Limpiar directorio de trabajo
            rm -rf student_repo
            
            # Clonar repo del estudiante
            echo "  📥 Clonando repo estudiante..."
            if ! git clone "https://github.com/${{ github.repository_owner }}/$repo.git" student_repo; then
              echo "  ❌ Error clonando repo"
              FAILED=$((FAILED + 1))
              continue
            fi
            
            cd student_repo
            
            # Detectar branch por defecto
            DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
            echo "  📋 Branch por defecto: $DEFAULT_BRANCH"
            
            # Verificar si ya existe un PR
            if EXISTING_PR=$(gh pr list --repo "${{ github.repository_owner }}/$repo" --state open --json number,title | jq -r '.[] | select(.title | contains("Template Updates")) | .number' | head -1) && [ -n "$EXISTING_PR" ]; then
              echo "  ⚠️  PR de template updates #$EXISTING_PR ya existe"
              cd ..
              continue
            fi
            
            # Crear branch para actualizaciones
            echo "  🔧 Creando branch: $UPDATE_BRANCH"
            git checkout -b "$UPDATE_BRANCH"
            
            # Copiar archivos actualizados desde el template
            echo "  📋 Aplicando actualizaciones del template..."
            
            # Copiar kata-1 limpio
            if [ -d "../katas/kata-1" ]; then
              echo "    🔄 Actualizando kata-1..."
              rm -rf katas/kata-1/*
              cp -r ../katas/kata-1/* katas/kata-1/
            fi
            
            # Copiar kata-2 completo si existe el directorio
            if [ -d "../.github/kata-templates/kata-2" ] && [ -d "katas" ]; then
              echo "    🔄 Actualizando kata-2..."
              rm -rf katas/kata-2 2>/dev/null || true
              cp -r ../.github/kata-templates/kata-2 katas/kata-2
            fi
            
            # Copiar workflows actualizados
            if [ -d "../.github/workflows" ]; then
              echo "    🔄 Actualizando workflows..."
              cp ../.github/workflows/grade-kata.yml .github/workflows/ 2>/dev/null || true
            fi
            
            # Copiar server tests
            if [ -d "../.github/server-tests" ]; then
              echo "    🔄 Actualizando server tests..."
              rm -rf .github/server-tests 2>/dev/null || true
              cp -r ../.github/server-tests .github/
            fi
            
            # Verificar si hay cambios
            if git diff --quiet && git diff --cached --quiet; then
              echo "  ℹ️  No hay cambios que aplicar"
              cd ..
              continue
            fi
            
            # Hacer commit de los cambios
            echo "  💾 Haciendo commit de cambios..."
            git add .
            git commit -m "🔧 Template Updates - Sistema Mejorado

Mejoras incluidas:
- Kata-1 limpio (sin archivos extra)
- Kata-2 con estructura .NET completa
- Tests optimizados (2 ejemplos por kata)
- Workflow de desbloqueo corregido

Tu progreso actual se mantiene intacto."
            
            # Push de la branch
            echo "  📤 Subiendo cambios..."
            if ! git push origin "$UPDATE_BRANCH"; then
              echo "  ❌ Error subiendo cambios"
              cd ..
              FAILED=$((FAILED + 1))
              continue
            fi
            
            # Crear PR
            echo "  🔧 Creando Pull Request..."
            PR_BODY="## 🔧 Actualizaciones del Template

### Mejoras incluidas:
- Kata-1 limpio (sin archivos extra)
- Kata-2 con estructura .NET completa
- Tests optimizados (2 ejemplos por kata)
- Workflow de desbloqueo corregido

### Acción requerida:
Acepta este PR para recibir las mejoras del template.

Tu progreso actual se mantiene intacto."

            if PR_URL=$(gh pr create \
              --title "🔧 Template Updates - Sistema Mejorado" \
              --body "$PR_BODY" \
              --base "$DEFAULT_BRANCH" \
              --head "$UPDATE_BRANCH" 2>&1); then
              echo "  ✅ PR creado exitosamente"
              echo "  📋 $PR_URL"
              SUCCESS=$((SUCCESS + 1))
            else
              echo "  ❌ Error creando PR: $PR_URL"
              FAILED=$((FAILED + 1))
            fi
            
            cd ..
            sleep 2
          done
          
          echo ""
          echo "📊 Resumen: $SUCCESS exitosos, $FAILED fallidos"

      - name: 🎉 Done
        run: |
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "🔍 Dry run completado - revisa los repos encontrados arriba"
          else
            echo "🎉 Sincronización completada!"
            echo "Los estudiantes recibirán notificaciones de PR"
          fi