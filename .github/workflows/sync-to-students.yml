name: üîÑ Sync Template to Students

on:
  workflow_dispatch:
    inputs:
      assignment_prefix:
        description: 'Prefijo de repos estudiantes'
        required: true
        default: 'katas-tdd'
      dry_run:
        description: 'Solo mostrar repos (no crear PRs)'
        type: boolean
        default: true

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: üîß Setup GitHub CLI with PAT
        run: |
          if [ -n "${{ secrets.PAT_TOKEN }}" ]; then
            echo "‚úÖ Usando Personal Access Token"
            gh auth login --with-token <<< "${{ secrets.PAT_TOKEN }}"
          else
            echo "‚ùå PAT_TOKEN no configurado"
            exit 1
          fi

      - name: üîç Find student repos
        id: find
        run: |
          echo "üîç Buscando repos con prefijo: ${{ inputs.assignment_prefix }}"
          
          gh repo list ${{ github.repository_owner }} \
            --json name \
            --jq '.[] | select(.name | contains("katas-tdd")) | select(.name != "tdd-katas-progressive-template") | select(.name | endswith("-template") | not) | .name' \
            > student_repos.txt
          
          TOTAL=$(cat student_repos.txt | wc -l)
          echo "‚úÖ Encontrados: $TOTAL repos"
          echo "total=$TOTAL" >> $GITHUB_OUTPUT

      - name: üìã Show repos (dry run)
        if: inputs.dry_run
        run: |
          echo "üîç DRY RUN - Repos que recibir√≠an PRs:"
          echo "======================================"
          cat student_repos.txt | while read repo; do
            [ -n "$repo" ] && echo "  üìÅ ${{ github.repository_owner }}/$repo"
          done
          echo ""
          echo "üìä Total: ${{ steps.find.outputs.total }} repositorios"

      - name: üì§ Smart Sync
        if: inputs.dry_run == false
        run: |
          echo "üì§ Sincronizaci√≥n inteligente iniciada..."
          
          # Configurar git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          UPDATE_BRANCH="template-updates-$(date +%Y%m%d-%H%M%S)"
          echo "üîß Branch para PRs: $UPDATE_BRANCH"
          
          SUCCESS=0
          FAILED=0
          
          # Funci√≥n para verificar si una kata tiene trabajo del estudiante
          has_student_work() {
            local kata_dir="$1"
            if [ ! -d "$kata_dir" ]; then
              return 1  # No existe
            fi
            
            # Buscar archivos .cs que no sean tests
            local cs_files=$(find "$kata_dir" -name "*.cs" -not -name "*Tests.cs" 2>/dev/null)
            for file in $cs_files; do
              if [ -f "$file" ]; then
                # Si no contiene NotImplementedException, tiene trabajo
                if ! grep -q "throw new NotImplementedException" "$file" 2>/dev/null; then
                  return 0  # Tiene trabajo
                fi
                # Si tiene muchas l√≠neas, probablemente tiene trabajo
                local lines=$(wc -l < "$file" 2>/dev/null || echo "0")
                if [ "$lines" -gt 25 ]; then
                  return 0  # Probablemente tiene trabajo
                fi
              fi
            done
            
            return 1  # Sin trabajo significativo
          }
          
          while read repo; do
            [ -z "$repo" ] && continue
            
            echo ""
            echo "üîÑ Procesando: $repo"
            
            # Limpiar y clonar
            rm -rf temp_repo
            if ! git clone "https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository_owner }}/$repo.git" temp_repo; then
              echo "  ‚ùå Error clonando"
              FAILED=$((FAILED + 1))
              continue
            fi
            
            cd temp_repo
            git checkout -b "$UPDATE_BRANCH"
            
            # Analizar qu√© katas est√°n desbloqueadas
            UNLOCKED_KATAS=""
            for kata_num in 1 2 3 4 5; do
              if [ -d "katas/kata-$kata_num" ]; then
                UNLOCKED_KATAS="$UNLOCKED_KATAS kata-$kata_num"
              fi
            done
            echo "  üìã Katas desbloqueadas:$UNLOCKED_KATAS"
            
            # Aplicar actualizaciones inteligentes
            SYNC_CHANGES=0
            
            # Kata-1: Actualizar si no tiene trabajo del estudiante
            if echo "$UNLOCKED_KATAS" | grep -q "kata-1" && [ -d "../katas/kata-1" ]; then
              if has_student_work "katas/kata-1"; then
                echo "  ‚ö†Ô∏è  Kata-1: Conservando trabajo del estudiante"
              else
                echo "  üîÑ Kata-1: Actualizando (sin trabajo previo)"
                rm -rf katas/kata-1/* 2>/dev/null || true
                cp -r ../katas/kata-1/* katas/kata-1/ 2>/dev/null || true
                SYNC_CHANGES=1
              fi
            fi
            
            # Kata-2: Crear si est√° desbloqueada pero no tiene trabajo
            if echo "$UNLOCKED_KATAS" | grep -q "kata-2" && [ -d "../.github/kata-templates/kata-2" ]; then
              if [ ! -d "katas/kata-2" ]; then
                echo "  üÜï Kata-2: Creando nueva kata"
                cp -r ../.github/kata-templates/kata-2 katas/kata-2 2>/dev/null || true
                SYNC_CHANGES=1
              elif has_student_work "katas/kata-2"; then
                echo "  ‚ö†Ô∏è  Kata-2: Conservando trabajo del estudiante"
              else
                echo "  üîÑ Kata-2: Actualizando (sin trabajo previo)"
                rm -rf katas/kata-2/* 2>/dev/null || true
                cp -r ../.github/kata-templates/kata-2/* katas/kata-2/ 2>/dev/null || true
                SYNC_CHANGES=1
              fi
            fi
            
            # Sistema: Siempre actualizar (workflows, server tests)
            echo "  üîß Actualizando sistema..."
            if [ -f "../.github/workflows/grade-kata.yml" ]; then
              cp ../.github/workflows/grade-kata.yml .github/workflows/ 2>/dev/null || true
              SYNC_CHANGES=1
            fi
            
            if [ -d "../.github/server-tests" ]; then
              rm -rf .github/server-tests 2>/dev/null || true
              cp -r ../.github/server-tests .github/ 2>/dev/null || true
              SYNC_CHANGES=1
            fi
            
            # Verificar si hay cambios reales
            if [ "$SYNC_CHANGES" -eq 0 ] || (git diff --quiet && git diff --cached --quiet); then
              echo "  ‚ÑπÔ∏è  Sin cambios necesarios"
              cd ..
              continue
            fi
            
            # Commit y push
            git add .
            git commit -m "üîß Template Updates (Smart Sync) - Respeta trabajo existente, actualiza sistema"
            
            if git push origin "$UPDATE_BRANCH"; then
              if gh pr create \
                --title "üîß Template Updates (Smart Sync)" \
                --body "Sincronizaci√≥n inteligente: Actualiza sistema y workflows respetando tu trabajo existente. Solo modifica katas sin c√≥digo previo. Tu progreso se mantiene intacto." \
                --base master \
                --head "$UPDATE_BRANCH"; then
                echo "  ‚úÖ PR creado con sincronizaci√≥n inteligente"
                SUCCESS=$((SUCCESS + 1))
              else
                echo "  ‚ùå Error creando PR"
                FAILED=$((FAILED + 1))
              fi
            else
              echo "  ‚ùå Error en push"
              FAILED=$((FAILED + 1))
            fi
            
            cd ..
          done < student_repos.txt
          
          echo ""
          echo "üìä Resultado: $SUCCESS exitosos, $FAILED fallidos"

      - name: üéâ Done
        run: |
          echo "üéâ Sincronizaci√≥n inteligente completada"