name: 🔄 Auto-Sync Template to Students

on:
  workflow_dispatch:
    inputs:
      assignment_prefix:
        description: 'Prefijo de repos estudiantes'
        required: true
        default: 'katas-tdd'
      dry_run:
        description: 'Solo mostrar repos (no hacer cambios)'
        type: boolean
        default: true

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🔧 Setup GitHub CLI with PAT
        run: |
          if [ -n "${{ secrets.PAT_TOKEN }}" ]; then
            echo "✅ Usando Personal Access Token"
            gh auth login --with-token <<< "${{ secrets.PAT_TOKEN }}"
          else
            echo "❌ PAT_TOKEN no configurado"
            exit 1
          fi
          
          # Instalar jq para parsear JSON
          sudo apt-get update && sudo apt-get install -y jq

      - name: 🔍 Find student repos
        id: find
        run: |
          echo "🔍 Buscando repos con prefijo: ${{ inputs.assignment_prefix }}"
          
          gh repo list ${{ github.repository_owner }} \
            --json name \
            --jq '.[] | select(.name | contains("katas-tdd")) | select(.name != "tdd-katas-progressive-template") | select(.name | endswith("-template") | not) | .name' \
            > student_repos.txt
          
          TOTAL=$(cat student_repos.txt | wc -l)
          echo "✅ Encontrados: $TOTAL repos"
          echo "total=$TOTAL" >> $GITHUB_OUTPUT

      - name: 📋 Show repos (dry run)
        if: inputs.dry_run
        run: |
          echo "🔍 DRY RUN - Repos que serían sincronizados:"
          echo "==========================================="
          cat student_repos.txt | while read repo; do
            [ -n "$repo" ] && echo "  📁 ${{ github.repository_owner }}/$repo"
          done
          echo ""
          echo "📊 Total: ${{ steps.find.outputs.total }} repositorios"

      - name: 📤 Auto Sync
        if: inputs.dry_run == false
        run: |
          echo "📤 Sincronización automática iniciada..."
          
          # Configurar git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          echo "🔧 Sincronización directa a master (sin PRs)"
          
          # Función para verificar si un archivo debe ser excluido
          should_exclude() {
            local file="$1"
            
            # Leer patrones de .adminignore (ignorar comentarios y líneas vacías)
            while IFS= read -r pattern; do
              # Saltar comentarios y líneas vacías
              [[ "$pattern" =~ ^[[:space:]]*# ]] && continue
              [[ -z "$pattern" ]] && continue
              
              # Convertir patrón a regex simple
              pattern=$(echo "$pattern" | sed 's/\./\\./g' | sed 's/\*/.*/g')
              
              # Verificar si el archivo coincide con el patrón
              if [[ "$file" =~ $pattern ]]; then
                return 0  # Sí debe excluirse
              fi
            done < .adminignore
            
            return 1  # No debe excluirse
          }
          
          SUCCESS=0
          FAILED=0
          

          
          while read repo; do
            [ -z "$repo" ] && continue
            
            echo ""
            echo "🔄 Procesando: $repo"
            
            # Limpiar y clonar
            rm -rf temp_repo
            if ! git clone "https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository_owner }}/$repo.git" temp_repo; then
              echo "  ❌ Error clonando"
              FAILED=$((FAILED + 1))
              continue
            fi
            
            cd temp_repo
            # Trabajar directamente en master - no crear branch
            
            # Leer progreso del estudiante desde progress.json
            if [ -f ".github/progress.json" ]; then
              CURRENT_KATA=$(cat .github/progress.json | jq -r '.current_kata // 1' 2>/dev/null || echo "1")
              
              # Obtener katas completadas de forma más simple
              if cat .github/progress.json | jq -e '.completed_katas' >/dev/null 2>&1; then
                COMPLETED_KATAS=$(cat .github/progress.json | jq -r '.completed_katas | join(" ")' 2>/dev/null || echo "")
              else
                COMPLETED_KATAS=""
              fi
              
              echo "  📋 Progreso del estudiante:"
              echo "    🎯 Kata actual: $CURRENT_KATA"
              echo "    ✅ Katas completadas: [$COMPLETED_KATAS]"
            else
              echo "  ⚠️  No se encontró progress.json - asumiendo kata 1"
              CURRENT_KATA=1
              COMPLETED_KATAS=""
            fi
            
            # Determinar qué katas están disponibles/desbloqueadas
            UNLOCKED_KATAS=""
            for kata_num in 1 2 3 4 5; do
              if [ $kata_num -le $CURRENT_KATA ]; then
                UNLOCKED_KATAS="$UNLOCKED_KATAS kata-$kata_num"
              fi
            done
            echo "  📋 Katas desbloqueadas:$UNLOCKED_KATAS"
            
            # Aplicar actualizaciones basadas en progreso
            SYNC_CHANGES=0
            
            # Lógica de sincronización inteligente
            for kata_num in 1 2 3 4 5; do
              if echo "$UNLOCKED_KATAS" | grep -q "kata-$kata_num"; then
                
                # Determinar el template source
                if [ $kata_num -eq 1 ] && [ -d "../katas/kata-1" ]; then
                  TEMPLATE_SOURCE="../katas/kata-1"
                elif [ $kata_num -gt 1 ] && [ -d "../.github/kata-templates/kata-$kata_num" ]; then
                  TEMPLATE_SOURCE="../.github/kata-templates/kata-$kata_num"
                else
                  continue  # No hay template para esta kata
                fi
                
                KATA_DIR="katas/kata-$kata_num"
                
                # Decidir acción basada en progreso
                if echo " $COMPLETED_KATAS " | grep -q " $kata_num "; then
                  echo "  ✅ Kata-$kata_num: COMPLETADA - no tocar"
                  
                elif [ $kata_num -eq $CURRENT_KATA ]; then
                  echo "  🎯 Kata-$kata_num: ACTIVA - REEMPLAZAR COMPLETAMENTE (conservar en commit)"
                  
                  # Para kata activa: SIEMPRE reemplazar completamente el template
                  # Esto evita problemas con archivos movidos o estructuras modificadas
                  if [ ! -d "$KATA_DIR" ]; then
                    echo "    🆕 Creando kata activa"
                    cp -r "$TEMPLATE_SOURCE" "$KATA_DIR" 2>/dev/null || true
                    SYNC_CHANGES=1
                  else
                    echo "    🔄 REEMPLAZANDO template completo (trabajo previo queda en git history)"
                    
                    # IMPORTANTE: Hacer commit del trabajo actual antes del reemplazo
                    if ! (cd "$KATA_DIR" && git diff --quiet HEAD -- . 2>/dev/null); then
                      echo "    💾 Guardando trabajo actual en commit temporal"
                      git add "$KATA_DIR" 2>/dev/null || true
                      git commit -m "💾 Auto-backup: Trabajo en kata-$kata_num antes de sync template" 2>/dev/null || true
                    else
                      echo "    ℹ️  No hay trabajo sin commitear en kata-$kata_num"
                    fi
                    
                    # Reemplazar completamente - no intentar preservar estructura modificada
                    echo "    🔄 Aplicando template actualizado desde: $TEMPLATE_SOURCE"
                    
                    # Debug: mostrar qué hay antes
                    echo "    📋 Antes del reemplazo:"
                    ls -la "$KATA_DIR" 2>/dev/null || echo "    (directorio no existe)"
                    
                    rm -rf "$KATA_DIR" 2>/dev/null || true
                    cp -r "$TEMPLATE_SOURCE" "$KATA_DIR" 2>/dev/null || true
                    
                    # Debug: mostrar qué hay después
                    echo "    📋 Después del reemplazo:"
                    ls -la "$KATA_DIR" 2>/dev/null || echo "    (error copiando)"
                    
                    SYNC_CHANGES=1
                  fi
                  
                elif [ $kata_num -lt $CURRENT_KATA ]; then
                  echo "  🟢 Kata-$kata_num: ANTERIOR - solo crear si no existe"
                  
                  if [ ! -d "$KATA_DIR" ]; then
                    echo "    🆕 Creando kata anterior faltante"
                    cp -r "$TEMPLATE_SOURCE" "$KATA_DIR" 2>/dev/null || true
                    SYNC_CHANGES=1
                  else
                    echo "    ℹ️  Kata anterior ya existe - no tocar"
                  fi
                  
                else
                  echo "  🔒 Kata-$kata_num: FUTURA - no disponible aún"
                fi
                
              fi
            done
            
            # Sistema: Siempre actualizar (workflows, server tests)
            echo "  🔧 Actualizando sistema..."
            if [ -f "../.github/workflows/grade-kata.yml" ]; then
              cp ../.github/workflows/grade-kata.yml .github/workflows/ 2>/dev/null || true
              SYNC_CHANGES=1
            fi
            
            if [ -d "../.github/server-tests" ]; then
              rm -rf .github/server-tests 2>/dev/null || true
              cp -r ../.github/server-tests .github/ 2>/dev/null || true
              SYNC_CHANGES=1
            fi
            
            # 🧹 LIMPIAR ARCHIVOS ADMINISTRATIVOS (según .adminignore)
            echo "  🧹 Eliminando archivos administrativos..."
            CLEANED_COUNT=0
            
            # Archivos a eliminar en la raíz
            for admin_file in .adminignore; do
              if [ -f "$admin_file" ]; then
                echo "    🗑️  Eliminando: $admin_file"
                rm -f "$admin_file"
                CLEANED_COUNT=$((CLEANED_COUNT + 1))
              fi
            done
            
            # Carpetas administrativas en .github/
            for admin_dir in .github/kata-templates; do
              if [ -d "$admin_dir" ]; then
                echo "    🗑️  Eliminando carpeta: $admin_dir"
                rm -rf "$admin_dir"
                CLEANED_COUNT=$((CLEANED_COUNT + 1))
              fi
            done
            
            # Eliminar workflow de sincronización (solo instructores)
            if [ -f ".github/workflows/sync-to-students.yml" ]; then
              echo "    🗑️  Eliminando workflow de sincronización"
              rm -f ".github/workflows/sync-to-students.yml"
              CLEANED_COUNT=$((CLEANED_COUNT + 1))
            fi
            
            echo "    ✅ Limpiados $CLEANED_COUNT archivos/carpetas administrativos"
            
            # Verificar si hay cambios reales después de las operaciones
            git add . 2>/dev/null || true
            
            if git diff --cached --quiet; then
              echo "  ℹ️  Sin cambios reales en el repositorio (template ya actualizado)"
              cd ..
              continue
            fi
            
            echo "  📝 Cambios detectados - procediendo con commit"
            
            # Commit y push directo a master (sin PR) - git add ya se hizo arriba
            git commit -m "🔧 Auto-sync: Template actualizado automáticamente - Haz git pull para obtener actualizaciones"
            
            # Pull primero para evitar conflictos, luego push
            if git pull --rebase origin master 2>/dev/null || git pull origin master 2>/dev/null; then
              if git push origin master; then
                echo "  ✅ Sincronización automática completada"
                SUCCESS=$((SUCCESS + 1))
              else
                echo "  ❌ Error en push a master"
                FAILED=$((FAILED + 1))
              fi
            else
              echo "  ❌ Error en pull - posible conflicto"
              FAILED=$((FAILED + 1))
            fi
            
            cd ..
          done < student_repos.txt
          
          echo ""
          echo "📊 Resultado: $SUCCESS exitosos, $FAILED fallidos"

      - name: 🎉 Done
        run: |
          echo "🎉 Sincronización automática completada (sin PRs)"